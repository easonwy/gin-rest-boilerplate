// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/tapas/go-user-service/internal/auth/handler"
	"github.com/tapas/go-user-service/internal/auth/repository"
	"github.com/tapas/go-user-service/internal/auth/service"
	"github.com/tapas/go-user-service/internal/config"
	"github.com/tapas/go-user-service/internal/provider"
	"github.com/tapas/go-user-service/internal/user"
	handler2 "github.com/tapas/go-user-service/internal/user/handler"
	"github.com/tapas/go-user-service/pkg/middleware"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeApp creates the application dependencies.
func InitializeApp() (*App, error) {
	config, err := provider.ProvideConfig()
	if err != nil {
		return nil, err
	}
	db, err := provider.ProvideDatabase(config)
	if err != nil {
		return nil, err
	}
	userRepository := user.ProvideUserRepository(db)
	userService := user.ProvideUserService(userRepository)
	userHandler := user.ProvideUserHandler(userService)
	client, err := provider.ProvideRedisClient(config)
	if err != nil {
		return nil, err
	}
	authRepository := repository.NewAuthRepository(client)
	authService := service.NewAuthService(userService, authRepository, client, config)
	authHandler := handler.NewAuthHandler(authService)
	handlerFunc := middleware.AuthMiddleware(config)
	engine := NewRouter(userHandler, authHandler, handlerFunc)
	app := &App{
		Router: engine,
		DB:     db,
		Config: config,
	}
	return app, nil
}

// wire.go:

// App represents the main application structure.
type App struct {
	Router *gin.Engine
	DB     *gorm.DB
	Config *config.Config
}

// NewRouter creates a new Gin router and sets up routes.
func NewRouter(userHdl handler2.UserHandler, authHandler handler.AuthHandler, authMiddleware gin.HandlerFunc) *gin.Engine {
	r := gin.Default()

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})

	userGroup := r.Group("/users")
	userGroup.Use(authMiddleware)
	{
		userGroup.POST("/register", userHdl.Register)
		userGroup.GET("/:id", userHdl.GetUserByID)
		userGroup.GET("/", userHdl.GetUserByEmail)
		userGroup.PUT("/:id", userHdl.UpdateUser)
		userGroup.DELETE("/:id", userHdl.DeleteUser)

	}

	authGroup := r.Group("/auth")
	{
		authGroup.POST("/login", authHandler.Login)
		authGroup.POST("/refresh-token", authHandler.RefreshToken)

	}

	authProtectedGroup := r.Group("/auth")
	authProtectedGroup.Use(authMiddleware)
	{
		authProtectedGroup.POST("/logout", authHandler.Logout)
	}

	return r
}

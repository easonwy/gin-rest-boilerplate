// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/yi-tech/go-user-service/internal/auth/handler"
	"github.com/yi-tech/go-user-service/internal/auth/repository"
	"github.com/yi-tech/go-user-service/internal/auth/service"
	"github.com/yi-tech/go-user-service/internal/config"
	"github.com/yi-tech/go-user-service/internal/grpc"
	"github.com/yi-tech/go-user-service/internal/provider"
	"github.com/yi-tech/go-user-service/internal/user"
	handler2 "github.com/yi-tech/go-user-service/internal/user/handler"
	"github.com/yi-tech/go-user-service/pkg/middleware"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"net/http"
)

// Injectors from wire.go:

// InitializeApp creates the application dependencies.
func InitializeApp() (*App, error) {
	config, err := provider.ProvideConfig()
	if err != nil {
		return nil, err
	}
	db, err := provider.ProvideDatabase(config)
	if err != nil {
		return nil, err
	}
	userRepository := user.ProvideUserRepository(db)
	userService := user.ProvideUserService(userRepository)
	userHandler := user.ProvideUserHandler(userService)
	client, err := provider.ProvideRedisClient(config)
	if err != nil {
		return nil, err
	}
	authRepository := repository.NewAuthRepository(client)
	authService := service.NewAuthService(userService, authRepository, config)
	authHandler := handler.NewAuthHandler(authService)
	handlerFunc := middleware.AuthMiddleware(config, authRepository)
	logger, err := provider.ProvideLogger()
	if err != nil {
		return nil, err
	}
	engine := NewRouter(userHandler, authHandler, handlerFunc, logger)
	grpcConfig := ProvideGRPCConfig(config)
	server := grpc.NewServer(userService, grpcConfig)
	app := &App{
		Router:     engine,
		DB:         db,
		Config:     config,
		GRPCServer: server,
	}
	return app, nil
}

// wire.go:

// ProvideGRPCConfig provides the gRPC server configuration
func ProvideGRPCConfig(cfg *config.Config) *grpc.Config {
	return &grpc.Config{
		GRPCPort: cfg.GRPC.Port,
		HTTPPort: cfg.GRPC.Port + 1,
	}
}

// App represents the main application structure.
type App struct {
	Router     *gin.Engine
	DB         *gorm.DB
	Config     *config.Config
	GRPCServer *grpc.Server // gRPC server instance
}

// NewRouter creates a new Gin router and sets up routes.
func NewRouter(userHdl handler2.UserHandler, authHdl handler.AuthHandler, authMiddleware gin.HandlerFunc, logger *zap.Logger) *gin.Engine {
	r := gin.Default()

	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status": "ok",
		})
	})

	v1 := r.Group("/api/v1")
	{

		public := v1.Group("/")
		{

			userGroup := public.Group("/users")
			{
				userGroup.POST("/register", userHdl.Register)
				userGroup.GET("", userHdl.GetUserByEmail)
				userGroup.GET("/:id", userHdl.GetUserByID)
			}

			authGroup := public.Group("/auth")
			{
				authGroup.POST("/login", authHdl.Login)
				authGroup.POST("/refresh", authHdl.RefreshToken)
			}
		}

		protected := v1.Group("/")
		protected.Use(authMiddleware)
		{

			userGroup := protected.Group("/users")
			{
				userGroup.PUT("/:id", userHdl.UpdateUser)
				userGroup.DELETE("/:id", userHdl.DeleteUser)
			}

			profileGroup := protected.Group("/profile")
			{
				profileGroup.GET("", userHdl.GetUserByID)
				profileGroup.PUT("", userHdl.UpdateUser)
			}
		}
	}

	return r
}

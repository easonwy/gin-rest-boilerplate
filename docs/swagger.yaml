basePath: /api/v1
definitions:
  dto.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        description: Use pointers for optional fields
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.LoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        description: Access token expiry time in seconds
        type: integer
      refresh_token:
        type: string
    type: object
  model.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample user service server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.LoginResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the user's refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh an expired access token using a valid refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed token
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.LoginResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh access token
      tags:
      - auth
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  properties:
                    message:
                      type: string
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to get user
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid user ID or request body
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update an existing user
      tags:
      - users
  /users/email:
    get:
      consumes:
      - application/json
      description: Get a user's details by their email address
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Email query parameter is required
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to get user
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get a user by email
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, and email
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered user
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

basePath: /api/v1
definitions:
  github_com_yi-tech_go-user-service_internal_transport_http_response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  internal_transport_http_auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  internal_transport_http_auth.LoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        description: Access token expiry time in seconds
        type: integer
      refresh_token:
        type: string
    type: object
  internal_transport_http_auth.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  internal_transport_http_user.UpdatePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  internal_transport_http_user.UserRegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  internal_transport_http_user.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
    type: object
  internal_transport_http_user.UserUpdateRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample user service server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_auth.LoginResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the user's refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_auth.LoginResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Refresh access token
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a user's information by their email address
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_user.UserResponse'
              type: object
        "400":
          description: Email is required
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Get a user by email
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_user.UserResponse'
              type: object
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_user.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_user.UserResponse'
              type: object
        "400":
          description: Invalid request data or user ID format
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Update user profile
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update a user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password update information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_user.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "400":
          description: Invalid request data or user ID format
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "401":
          description: Current password is incorrect
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Update user password
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_transport_http_user.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_transport_http_user.UserResponse'
              type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_yi-tech_go-user-service_internal_transport_http_response.Response'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
